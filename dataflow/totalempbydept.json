{
	"name": "totalempbydept",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "empdataset",
						"type": "DatasetReference"
					},
					"name": "empsource"
				},
				{
					"dataset": {
						"referenceName": "Deptdataset",
						"type": "DatasetReference"
					},
					"name": "depart"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputdataset1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregateondept"
				},
				{
					"name": "joinondept"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          departmet as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empsource",
				"source(output(",
				"          deptid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> depart",
				"empsource aggregate(groupBy(departmet),",
				"     totalemp = count(empid)) ~> aggregateondept",
				"aggregateondept, depart join(departmet == deptid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinondept",
				"joinondept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['totalldeptemployee'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          depname,",
				"          totalemp",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}